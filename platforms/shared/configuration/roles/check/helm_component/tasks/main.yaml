##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
# Task to check if Job deployed and completed
# This task will try for a maximum of 10 times with an interval of
# 60 seconds between each try

- name: Print kubernetes.config_file comng from file
  debug:
    msg: "kubernetes.config_file: {{kubernetes.config_file }}"
  when: kubernetes.config_file is defined  #supplychain


- name: Print kubernetes.context comng from file
  debug:
    msg: "kubernetes.context: {{kubernetes.context }}"
  when: kubernetes.context is defined  #supplychain  

- name: 'Wait for {{ component_type }} {{ component_name }} in {{ namespace }}'  #Wait for Job supplychain-cacerts-job in supplychain-net
  k8s_info:
    kind: "Job"
    namespace: "{{ namespace }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
    label_selectors:
      - "app = {{ component_name }}"  #supplychain-cacerts-job
  register: component_data
  retries: "{{ network.env.retry_count}}"
  delay: 10
  until: component_data.resources|length > 0 and ((component_data.resources[0].status.phase is defined and component_data.resources[0].status.phase == "Succeeded") or (component_data.resources[0].status.succeeded is defined and component_data.resources[0].status.succeeded == 1))
  when: component_type == "Job"

- name: Print component_data of job
  debug:
    var: component_data  

# one time job check and registers the result variable
- name: 'Check for {{ job_title }} job on {{ component_name }}'
  k8s_info:
    kind: "Pod"
    namespace: "{{ namespace }}"
    label_selectors:
      - "app = {{ component_name }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: result
  when: component_type == "OneTimeJob"

# Task to check if Pod is deployed and running
# This task will try for a maximum of 10 times with an interval of
# 60 seconds between each try
- name: 'Wait for {{ component_type }} {{ component_name }} in {{ namespace }}'
  k8s_info:
    kind: "Pod"
    namespace: "{{ namespace }}"
    kubeconfig: "{{ kubeconfig | default(kubernetes.config_file) }}"
    context: "{{ context | default(kubernetes.context) }}"
    label_selectors: "{{ label_selectors }}"
    field_selectors:
      - status.phase=Running
  register: component_data
  retries: "{{ network.env.retry_count}}"
  delay: "{{ delay | default(30) }}"
  until: component_data.resources|length > 0
  when: component_type == "Pod"
