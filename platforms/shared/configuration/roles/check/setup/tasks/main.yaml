##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---

- name: Print component_type
  debug:
    msg: "Component Type: {{ component_type }}"

- name: Print Vault URL
  debug:
    msg: "Vault URL: {{ vault.url }}"

- name: Print Vault Root Token
  debug:
    msg: "Vault Root Token: {{ vault.root_token }}"   

- name: Print component_name
  debug:
    msg: "component_name: {{ component_name }}"     #supplychain-net


- name: Print check
  debug:
    msg: "check: {{ check }}"     
      
# - name: Print variables
#   shell: echo "printing vars"
#   environment:
#     KUBECONFIG: "{{ kubernetes.config_file }}"  # Path to your kubeconfig file
#   register: cluster_info

# - debug:
#     var: cluster_info.stdout



# This task checks if the vault path already exists
- name: Check if Kubernetes-auth already created for Organization
  shell: |
    vault auth list --format json | jq "to_entries[] | select(.value.restricted|not) | .key"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: auth_lists
  when: check == "vault_auth"

# This task checks if the vault-ro policy already exists
- name: Check if policy exists
  shell: |
    vault policy read vault-crypto-{{ component_type }}-{{ component_name }}-ro
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_policy_result
  ignore_errors: yes
  when: check == "vault_policies"

# Check if Docker credentials exist already
- name: Check docker cred exists
  k8s_info:
    kind: Secret
    namespace: "{{ component_name }}"
    name: "regcred"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_regcred
  when: check == "docker_credentials"

# Check if Git credentials exist already
- name: Check git https cred exists
  k8s_info:
    kind: Secret
    namespace: "{{ component_name }}"
    name: "git-https-credentials"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_gitcred
  when: check == "git_credentials"



# - name: Print vault_field
#   debug:
#     msg: "vault_field: {{ vault_field }}" 

# - name: Print vault_path
#   debug:
#     msg: "vault_path: {{ vault_path }}" 


- name: Print vault_field
  debug:
    msg: "vault_field: {{ vault_field }}"  #supplychain-net-CA.key
  when: vault_field is defined  

- name: Print vault_path
  debug:
    msg: "vault_path: {{ vault_path }}"    #secretsv2/crypto/ordererOrganizations/supplychain-net/ca
  when: vault_path is defined

- name: Print the origin of vault_path
  debug:
    msg: "The value of check ({{ check }}) is defined in: {{ lookup('vars', 'check', wantlist=True) }}"
  when:
    - vault_path is defined
    - check is defined

- name: Debug check variable
  debug:
    msg: "Value of check: {{ check }}"
  when: check is defined   #certs_created

# This task waits until certs are stored in vault.
- name: Wait for certs to be created.
  shell: |
    vault kv get -field={{ vault_field }} {{ vault_path }}
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_result
  retries: "{{ network.env.retry_count}}"
  delay: 30
  until: vault_result.failed == False
  when: check == "crypto_materials"
  # # vars:
  # #   check: "crypto_materials"
  # when:
  #   - (check | default('crypto_materials')) == "crypto_materials"
  #   - vault_path is defined


- name: Display shell output
  debug:
    var: vault_result.stdout_lines  

# This task check if certs exists in vault.
- name: check if certs exists in vault.
  shell: |
    vault kv get -field={{ vault_field }} {{ vault_path }}
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  ignore_errors: yes
  register: certs_created
  when: check == "certs_created"
